@page
@model VinderenApi.Pages.Authentication.ImplementationOfIdentityCoreModel
@{
	<h3>Implementation of Identity Core</h3>
	<pre>
The EntityContext class, which inherits from IdentityDbContext, is responsible for creating and managing the 
database tables related to user authentication and authorization. The tables like AspNetUsers, AspNetRoles, and others 
are automatically generated by Entity Framework Core based on your EntityContext class when running migrations.

In Program.cs, the following code:

	builder.Services.AddIdentityCore&lt;IdentityUser&gt;(options =>
{
    options.SignIn.RequireConfirmedAccount = false;
})
.AddRoles&lt;IdentityRole&gt;()
.AddUserStore&lt;UserStore&lt;IdentityUser, IdentityRole, EntityContext, string&gt;&gt;()
.AddRoleStore&lt;RoleStore&lt;IdentityRole, EntityContext, string&gt;&gt;()
.AddDefaultTokenProviders()
.AddEntityFrameworkStores&lt;EntityContext&gt;();

configures the Identity system to use your EntityContext class as the database context for storing user and role information. 
This setup connects your Identity-related services, such as UserManager and RoleManager, to your EntityContext, 
allowing you to perform user and role management operations with Entity Framework Core.

AddIdentityCore&ltIdentityUser&gt() is configuring Identity services in your application. 
It tells ASP.NET Core to use the IdentityUser class as the primary user representation.

So, the combination of your EntityContext and the configuration in Program.cs allows you to use Identity-related features, 
manage users and roles, and store authentication data in your database.

<h4>Example use in AuthController.cs</h4>
	In AuthController, you have the following constructor:

	public AuthController(UserManager&lt;IdentityUser&gt; userManager, 
		JwtConfig jwtConfig, 
		DbContextOptions&lt;EntityContext&gt; identityDbContextOptions)
	{
		// ...
	}
	
	The UserManager&lt;IdentityUser&gt; parameter is a key component of the Identity system. 
	It provides APIs for managing user-related operations, such as user creation and authentication. 
	In your controller, you're injecting UserManager&lt;IdentityUser&gt;, which is part of the Identity system.

	Throughout your AuthController methods, you use the UserManager&lt;IdentityUser&gt; to interact with user-related operations. 
	For example, you use it to create new users and authenticate users during the login process.

	So, the AddIdentityCore&lt;IdentityUser&gt;() configuration sets up the necessary services and dependencies for user management, 
	and your AuthController uses those services to handle user registration and login operations.
	</pre>
}
